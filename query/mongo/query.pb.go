// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.22.3
// source: com/pistonint/grpc/query/mongo/query.proto

package mongo

import (
	"github.com/lucky-xin/xyz-common-go/core"
	"github.com/lucky-xin/xyz-common-go/query"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 聚合操作类
type AggregateOp int32

const (
	// 分组后， 求平均数
	AggregateOp_AVG AggregateOp = 0
	// 分组后，计算总记录数
	AggregateOp_COUNT AggregateOp = 1
	// 分组后， 对某字段值进行求和
	AggregateOp_SUM AggregateOp = 2
	// 分组后，根据资源文档的排序获取第一个文档数据
	AggregateOp_FIRST AggregateOp = 3
	// 分组后，根据资源文档的排序获取最后一个文档数据
	AggregateOp_LAST AggregateOp = 4
	// 分组后，添加元素到{@link java.util.List} 集合之中
	AggregateOp_PUSH AggregateOp = 5
	// 分组后，添加元素到{@link java.util.Set}集合之中,返回元素不重复
	AggregateOp_ADD_TO_SET AggregateOp = 6
	// 标准差
	AggregateOp_STD_DEV_SAMP AggregateOp = 7
	// 方差
	AggregateOp_STD_DEV_POP AggregateOp = 8
	// 分组后，求某个字段最大值
	AggregateOp_MAX AggregateOp = 9
	// 分组后，求某个字段最小值
	AggregateOp_MIN AggregateOp = 10
	// 分组后，求某个字段中位数
	AggregateOp_MEDIAN AggregateOp = 11
)

// Enum value maps for AggregateOp.
var (
	AggregateOp_name = map[int32]string{
		0:  "AVG",
		1:  "COUNT",
		2:  "SUM",
		3:  "FIRST",
		4:  "LAST",
		5:  "PUSH",
		6:  "ADD_TO_SET",
		7:  "STD_DEV_SAMP",
		8:  "STD_DEV_POP",
		9:  "MAX",
		10: "MIN",
		11: "MEDIAN",
	}
	AggregateOp_value = map[string]int32{
		"AVG":          0,
		"COUNT":        1,
		"SUM":          2,
		"FIRST":        3,
		"LAST":         4,
		"PUSH":         5,
		"ADD_TO_SET":   6,
		"STD_DEV_SAMP": 7,
		"STD_DEV_POP":  8,
		"MAX":          9,
		"MIN":          10,
		"MEDIAN":       11,
	}
)

func (x AggregateOp) Enum() *AggregateOp {
	p := new(AggregateOp)
	*p = x
	return p
}

func (x AggregateOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregateOp) Descriptor() protoreflect.EnumDescriptor {
	return file_com_pistonint_grpc_query_mongo_query_proto_enumTypes[0].Descriptor()
}

func (AggregateOp) Type() protoreflect.EnumType {
	return &file_com_pistonint_grpc_query_mongo_query_proto_enumTypes[0]
}

func (x AggregateOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregateOp.Descriptor instead.
func (AggregateOp) EnumDescriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{0}
}

// 查询条件实体
type Criteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询条件内容
	Criteria map[string]*core.Value `protobuf:"bytes,1,rep,name=criteria,proto3" json:"criteria,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Criteria) Reset() {
	*x = Criteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Criteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Criteria) ProtoMessage() {}

func (x *Criteria) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Criteria.ProtoReflect.Descriptor instead.
func (*Criteria) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{0}
}

func (x *Criteria) GetCriteria() map[string]*core.Value {
	if x != nil {
		return x.Criteria
	}
	return nil
}

// 支持排序查询条件
type CriteriaPlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询条件
	Condition *Criteria `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// 排序
	Sort *query.Sort `protobuf:"bytes,2,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// 限制返回
	Limit *int32 `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *CriteriaPlus) Reset() {
	*x = CriteriaPlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriteriaPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriteriaPlus) ProtoMessage() {}

func (x *CriteriaPlus) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriteriaPlus.ProtoReflect.Descriptor instead.
func (*CriteriaPlus) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{1}
}

func (x *CriteriaPlus) GetCondition() *Criteria {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *CriteriaPlus) GetSort() *query.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CriteriaPlus) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

// 获取中位数查询条件
type CriteriaMedian struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询条件
	Condition *Criteria `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// 排序
	Sort *query.Sort `protobuf:"bytes,2,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// 用于取中位数字段名称
	Field *string `protobuf:"bytes,3,opt,name=field,proto3,oneof" json:"field,omitempty"`
}

func (x *CriteriaMedian) Reset() {
	*x = CriteriaMedian{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriteriaMedian) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriteriaMedian) ProtoMessage() {}

func (x *CriteriaMedian) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriteriaMedian.ProtoReflect.Descriptor instead.
func (*CriteriaMedian) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{2}
}

func (x *CriteriaMedian) GetCondition() *Criteria {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *CriteriaMedian) GetSort() *query.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CriteriaMedian) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

// 获取数据范围
type CriteriaDataRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询条件
	Condition *Criteria `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// 获取数据范围字段名称
	Field *string `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
}

func (x *CriteriaDataRange) Reset() {
	*x = CriteriaDataRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriteriaDataRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriteriaDataRange) ProtoMessage() {}

func (x *CriteriaDataRange) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriteriaDataRange.ProtoReflect.Descriptor instead.
func (*CriteriaDataRange) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{3}
}

func (x *CriteriaDataRange) GetCondition() *Criteria {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *CriteriaDataRange) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

// 分桶统计
type GrpcBucketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询条件
	Condition *Criteria `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// 字段名称
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *GrpcBucketReq) Reset() {
	*x = GrpcBucketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcBucketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcBucketReq) ProtoMessage() {}

func (x *GrpcBucketReq) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcBucketReq.ProtoReflect.Descriptor instead.
func (*GrpcBucketReq) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{4}
}

func (x *GrpcBucketReq) GetCondition() *Criteria {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *GrpcBucketReq) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

// 分桶统计
type BucketReqs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询条件
	Reqs []*GrpcBucketReq `protobuf:"bytes,1,rep,name=reqs,proto3" json:"reqs,omitempty"`
}

func (x *BucketReqs) Reset() {
	*x = BucketReqs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketReqs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketReqs) ProtoMessage() {}

func (x *BucketReqs) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketReqs.ProtoReflect.Descriptor instead.
func (*BucketReqs) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{5}
}

func (x *BucketReqs) GetReqs() []*GrpcBucketReq {
	if x != nil {
		return x.Reqs
	}
	return nil
}

// 分组统计查询条件
type GroupOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询条件
	Match *Criteria `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// 分组字段名称
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// 显示字段名称
	Project []string `protobuf:"bytes,3,rep,name=project,proto3" json:"project,omitempty"`
	// 是否返回各个分段占比
	Ratio bool `protobuf:"varint,4,opt,name=ratio,proto3" json:"ratio,omitempty"`
	// 组内排序
	Sort *query.Sort `protobuf:"bytes,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// 分组前先排序
	Presort *query.Sort `protobuf:"bytes,6,opt,name=presort,proto3,oneof" json:"presort,omitempty"`
	// 分组聚合操作
	Ops []*Operation `protobuf:"bytes,7,rep,name=ops,proto3" json:"ops,omitempty"`
	// 添加字段
	AddFields []*GrpcAddField `protobuf:"bytes,8,rep,name=addFields,proto3" json:"addFields,omitempty"`
	// limit 限制返回数量
	Limit int32 `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	// skip 跳过
	Skip int32 `protobuf:"varint,10,opt,name=skip,proto3" json:"skip,omitempty"`
	// 后置过滤器
	PostFilter *PostFilter `protobuf:"bytes,11,opt,name=postFilter,proto3" json:"postFilter,omitempty"`
	// project 表达式
	ProjectExprs []*Expr `protobuf:"bytes,12,rep,name=projectExprs,proto3" json:"projectExprs,omitempty"`
	// 分组表达式
	GroupExprs []*Expr `protobuf:"bytes,13,rep,name=groupExprs,proto3" json:"groupExprs,omitempty"`
	// 返回类型
	ReturnType *string `protobuf:"bytes,14,opt,name=returnType,proto3,oneof" json:"returnType,omitempty"`
}

func (x *GroupOp) Reset() {
	*x = GroupOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupOp) ProtoMessage() {}

func (x *GroupOp) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupOp.ProtoReflect.Descriptor instead.
func (*GroupOp) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{6}
}

func (x *GroupOp) GetMatch() *Criteria {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *GroupOp) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GroupOp) GetProject() []string {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *GroupOp) GetRatio() bool {
	if x != nil {
		return x.Ratio
	}
	return false
}

func (x *GroupOp) GetSort() *query.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *GroupOp) GetPresort() *query.Sort {
	if x != nil {
		return x.Presort
	}
	return nil
}

func (x *GroupOp) GetOps() []*Operation {
	if x != nil {
		return x.Ops
	}
	return nil
}

func (x *GroupOp) GetAddFields() []*GrpcAddField {
	if x != nil {
		return x.AddFields
	}
	return nil
}

func (x *GroupOp) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GroupOp) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *GroupOp) GetPostFilter() *PostFilter {
	if x != nil {
		return x.PostFilter
	}
	return nil
}

func (x *GroupOp) GetProjectExprs() []*Expr {
	if x != nil {
		return x.ProjectExprs
	}
	return nil
}

func (x *GroupOp) GetGroupExprs() []*Expr {
	if x != nil {
		return x.GroupExprs
	}
	return nil
}

func (x *GroupOp) GetReturnType() string {
	if x != nil && x.ReturnType != nil {
		return *x.ReturnType
	}
	return ""
}

// 分组操作
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 聚合操作
	Op AggregateOp `protobuf:"varint,1,opt,name=op,proto3,enum=com.pistonint.grpc.query.mongo.AggregateOp" json:"op,omitempty"`
	// 聚合字段名称
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// 聚合之后返回字段名称
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{7}
}

func (x *Operation) GetOp() AggregateOp {
	if x != nil {
		return x.Op
	}
	return AggregateOp_AVG
}

func (x *Operation) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Operation) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type GrpcAddField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 添加字段名称
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// 添加字段值
	Value *core.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GrpcAddField) Reset() {
	*x = GrpcAddField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcAddField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcAddField) ProtoMessage() {}

func (x *GrpcAddField) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcAddField.ProtoReflect.Descriptor instead.
func (*GrpcAddField) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{8}
}

func (x *GrpcAddField) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *GrpcAddField) GetValue() *core.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type PostFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字段名称
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// 其他类型标签
	OtherLabel *string `protobuf:"bytes,2,opt,name=otherLabel,proto3,oneof" json:"otherLabel,omitempty"`
	// 字段值
	Values []*core.Value `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PostFilter) Reset() {
	*x = PostFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostFilter) ProtoMessage() {}

func (x *PostFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostFilter.ProtoReflect.Descriptor instead.
func (*PostFilter) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{9}
}

func (x *PostFilter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PostFilter) GetOtherLabel() string {
	if x != nil && x.OtherLabel != nil {
		return *x.OtherLabel
	}
	return ""
}

func (x *PostFilter) GetValues() []*core.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 聚合操作
	Op AggregateOp `protobuf:"varint,1,opt,name=op,proto3,enum=com.pistonint.grpc.query.mongo.AggregateOp" json:"op,omitempty"`
	// 计算表达式
	Expression *Expression `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	// 聚合之后返回字段名称
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{10}
}

func (x *Expr) GetOp() AggregateOp {
	if x != nil {
		return x.Op
	}
	return AggregateOp_AVG
}

func (x *Expr) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Expr) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用于接收表达式执行结果字段名称
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// 表达式
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	// 表达式计算参数
	Params []*core.Value `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{11}
}

func (x *Expression) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Expression) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Expression) GetParams() []*core.Value {
	if x != nil {
		return x.Params
	}
	return nil
}

// 分区统计查询条件
type BucketOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询条件
	Match *Criteria `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// 分组字段名称
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	// 显示字段名称
	Boundaries []*core.Pair `protobuf:"bytes,3,rep,name=boundaries,proto3" json:"boundaries,omitempty"`
	// 是否把查询结果反转
	Reversed bool `protobuf:"varint,4,opt,name=reversed,proto3" json:"reversed,omitempty"`
	// 默认区间名称,不匹配任何区间的记录
	Other *string `protobuf:"bytes,5,opt,name=other,proto3,oneof" json:"other,omitempty"`
	// 分桶聚合操作
	Ops []*Operation `protobuf:"bytes,6,rep,name=ops,proto3" json:"ops,omitempty"`
}

func (x *BucketOp) Reset() {
	*x = BucketOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketOp) ProtoMessage() {}

func (x *BucketOp) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketOp.ProtoReflect.Descriptor instead.
func (*BucketOp) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{12}
}

func (x *BucketOp) GetMatch() *Criteria {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *BucketOp) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *BucketOp) GetBoundaries() []*core.Pair {
	if x != nil {
		return x.Boundaries
	}
	return nil
}

func (x *BucketOp) GetReversed() bool {
	if x != nil {
		return x.Reversed
	}
	return false
}

func (x *BucketOp) GetOther() string {
	if x != nil && x.Other != nil {
		return *x.Other
	}
	return ""
}

func (x *BucketOp) GetOps() []*Operation {
	if x != nil {
		return x.Ops
	}
	return nil
}

type ExportQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前页码
	Current int32 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	// 分页大小
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 最小创建时间
	MinCreateTime string `protobuf:"bytes,3,opt,name=minCreateTime,proto3" json:"minCreateTime,omitempty"`
	// 最大创建时间
	MaxCreateTime string `protobuf:"bytes,4,opt,name=maxCreateTime,proto3" json:"maxCreateTime,omitempty"`
}

func (x *ExportQueryReq) Reset() {
	*x = ExportQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportQueryReq) ProtoMessage() {}

func (x *ExportQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportQueryReq.ProtoReflect.Descriptor instead.
func (*ExportQueryReq) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{13}
}

func (x *ExportQueryReq) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ExportQueryReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ExportQueryReq) GetMinCreateTime() string {
	if x != nil {
		return x.MinCreateTime
	}
	return ""
}

func (x *ExportQueryReq) GetMaxCreateTime() string {
	if x != nil {
		return x.MaxCreateTime
	}
	return ""
}

type ChunkDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 数据id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 分段获取数据，开始下标
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// 分段获取数据，结束下标
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ChunkDataReq) Reset() {
	*x = ChunkDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkDataReq) ProtoMessage() {}

func (x *ChunkDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkDataReq.ProtoReflect.Descriptor instead.
func (*ChunkDataReq) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{14}
}

func (x *ChunkDataReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChunkDataReq) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ChunkDataReq) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type DataPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 版本总数
	VersionNum int32 `protobuf:"varint,2,opt,name=versionNum,proto3" json:"versionNum,omitempty"`
	// 开始时间
	StartDate string `protobuf:"bytes,3,opt,name=startDate,proto3" json:"startDate,omitempty"`
	// 结束日期
	EndDate string `protobuf:"bytes,4,opt,name=endDate,proto3" json:"endDate,omitempty"`
	// 修改时间
	UpdateTime string `protobuf:"bytes,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// 所有版本统计信息
	VersionStats []*DataPreview_VersionStat `protobuf:"bytes,6,rep,name=versionStats,proto3" json:"versionStats,omitempty"`
}

func (x *DataPreview) Reset() {
	*x = DataPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPreview) ProtoMessage() {}

func (x *DataPreview) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPreview.ProtoReflect.Descriptor instead.
func (*DataPreview) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{15}
}

func (x *DataPreview) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DataPreview) GetVersionNum() int32 {
	if x != nil {
		return x.VersionNum
	}
	return 0
}

func (x *DataPreview) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *DataPreview) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *DataPreview) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DataPreview) GetVersionStats() []*DataPreview_VersionStat {
	if x != nil {
		return x.VersionStats
	}
	return nil
}

type DataPreview_VersionStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 版本号
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// 总数
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// 开始时间
	StartDate string `protobuf:"bytes,3,opt,name=startDate,proto3" json:"startDate,omitempty"`
	// 结束日期
	EndDate string `protobuf:"bytes,4,opt,name=endDate,proto3" json:"endDate,omitempty"`
	// 修改时间
	UpdateTime string `protobuf:"bytes,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *DataPreview_VersionStat) Reset() {
	*x = DataPreview_VersionStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPreview_VersionStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPreview_VersionStat) ProtoMessage() {}

func (x *DataPreview_VersionStat) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPreview_VersionStat.ProtoReflect.Descriptor instead.
func (*DataPreview_VersionStat) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP(), []int{15, 0}
}

func (x *DataPreview_VersionStat) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DataPreview_VersionStat) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DataPreview_VersionStat) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *DataPreview_VersionStat) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *DataPreview_VersionStat) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

var File_com_pistonint_grpc_query_mongo_query_proto protoreflect.FileDescriptor

var file_com_pistonint_grpc_query_mongo_query_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x12, 0x52, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f,
	0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x1a, 0x5b, 0x0a, 0x0d, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x50, 0x6c, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69,
	0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x6d, 0x0a, 0x0d, 0x47, 0x72, 0x70, 0x63,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x4f, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x73, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x65, 0x71, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e,
	0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x72, 0x65, 0x71, 0x73, 0x22, 0xe1, 0x05, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x70, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e,
	0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x37, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73,
	0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x70,
	0x73, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f,
	0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x09, 0x61, 0x64, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x72, 0x73, 0x12, 0x44, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x70, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78,
	0x70, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74,
	0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x5c, 0x0a, 0x0c, 0x47, 0x72, 0x70, 0x63, 0x41, 0x64,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3b,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x4a, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0x7c, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74,
	0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9d, 0x02,
	0x0a, 0x08, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f,
	0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e,
	0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x6f, 0x70, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x8a, 0x01,
	0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0c, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x90, 0x03, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x5b, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73,
	0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x95, 0x01,
	0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x9a, 0x01, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x47, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x55, 0x53, 0x48, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x53, 0x41, 0x4d,
	0x50, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x50,
	0x4f, 0x50, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x09, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x49, 0x4e, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e,
	0x10, 0x0b, 0x42, 0x4b, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e,
	0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x42, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x1b, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_pistonint_grpc_query_mongo_query_proto_rawDescOnce sync.Once
	file_com_pistonint_grpc_query_mongo_query_proto_rawDescData = file_com_pistonint_grpc_query_mongo_query_proto_rawDesc
)

func file_com_pistonint_grpc_query_mongo_query_proto_rawDescGZIP() []byte {
	file_com_pistonint_grpc_query_mongo_query_proto_rawDescOnce.Do(func() {
		file_com_pistonint_grpc_query_mongo_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_pistonint_grpc_query_mongo_query_proto_rawDescData)
	})
	return file_com_pistonint_grpc_query_mongo_query_proto_rawDescData
}

var file_com_pistonint_grpc_query_mongo_query_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_pistonint_grpc_query_mongo_query_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_com_pistonint_grpc_query_mongo_query_proto_goTypes = []interface{}{
	(AggregateOp)(0),                // 0: com.pistonint.grpc.query.mongo.AggregateOp
	(*Criteria)(nil),                // 1: com.pistonint.grpc.query.mongo.Criteria
	(*CriteriaPlus)(nil),            // 2: com.pistonint.grpc.query.mongo.CriteriaPlus
	(*CriteriaMedian)(nil),          // 3: com.pistonint.grpc.query.mongo.CriteriaMedian
	(*CriteriaDataRange)(nil),       // 4: com.pistonint.grpc.query.mongo.CriteriaDataRange
	(*GrpcBucketReq)(nil),           // 5: com.pistonint.grpc.query.mongo.GrpcBucketReq
	(*BucketReqs)(nil),              // 6: com.pistonint.grpc.query.mongo.BucketReqs
	(*GroupOp)(nil),                 // 7: com.pistonint.grpc.query.mongo.GroupOp
	(*Operation)(nil),               // 8: com.pistonint.grpc.query.mongo.Operation
	(*GrpcAddField)(nil),            // 9: com.pistonint.grpc.query.mongo.GrpcAddField
	(*PostFilter)(nil),              // 10: com.pistonint.grpc.query.mongo.PostFilter
	(*Expr)(nil),                    // 11: com.pistonint.grpc.query.mongo.Expr
	(*Expression)(nil),              // 12: com.pistonint.grpc.query.mongo.Expression
	(*BucketOp)(nil),                // 13: com.pistonint.grpc.query.mongo.BucketOp
	(*ExportQueryReq)(nil),          // 14: com.pistonint.grpc.query.mongo.ExportQueryReq
	(*ChunkDataReq)(nil),            // 15: com.pistonint.grpc.query.mongo.ChunkDataReq
	(*DataPreview)(nil),             // 16: com.pistonint.grpc.query.mongo.DataPreview
	nil,                             // 17: com.pistonint.grpc.query.mongo.Criteria.CriteriaEntry
	(*DataPreview_VersionStat)(nil), // 18: com.pistonint.grpc.query.mongo.DataPreview.VersionStat
	(*query.Sort)(nil),              // 19: com.pistonint.grpc.query.Sort
	(*core.Value)(nil),              // 20: com.pistonint.grpc.core.Value
	(*core.Pair)(nil),               // 21: com.pistonint.grpc.core.Pair
}
var file_com_pistonint_grpc_query_mongo_query_proto_depIdxs = []int32{
	17, // 0: com.pistonint.grpc.query.mongo.Criteria.criteria:type_name -> com.pistonint.grpc.query.mongo.Criteria.CriteriaEntry
	1,  // 1: com.pistonint.grpc.query.mongo.CriteriaPlus.condition:type_name -> com.pistonint.grpc.query.mongo.Criteria
	19, // 2: com.pistonint.grpc.query.mongo.CriteriaPlus.sort:type_name -> com.pistonint.grpc.query.Sort
	1,  // 3: com.pistonint.grpc.query.mongo.CriteriaMedian.condition:type_name -> com.pistonint.grpc.query.mongo.Criteria
	19, // 4: com.pistonint.grpc.query.mongo.CriteriaMedian.sort:type_name -> com.pistonint.grpc.query.Sort
	1,  // 5: com.pistonint.grpc.query.mongo.CriteriaDataRange.condition:type_name -> com.pistonint.grpc.query.mongo.Criteria
	1,  // 6: com.pistonint.grpc.query.mongo.GrpcBucketReq.condition:type_name -> com.pistonint.grpc.query.mongo.Criteria
	5,  // 7: com.pistonint.grpc.query.mongo.BucketReqs.reqs:type_name -> com.pistonint.grpc.query.mongo.GrpcBucketReq
	1,  // 8: com.pistonint.grpc.query.mongo.GroupOp.match:type_name -> com.pistonint.grpc.query.mongo.Criteria
	19, // 9: com.pistonint.grpc.query.mongo.GroupOp.sort:type_name -> com.pistonint.grpc.query.Sort
	19, // 10: com.pistonint.grpc.query.mongo.GroupOp.presort:type_name -> com.pistonint.grpc.query.Sort
	8,  // 11: com.pistonint.grpc.query.mongo.GroupOp.ops:type_name -> com.pistonint.grpc.query.mongo.Operation
	9,  // 12: com.pistonint.grpc.query.mongo.GroupOp.addFields:type_name -> com.pistonint.grpc.query.mongo.GrpcAddField
	10, // 13: com.pistonint.grpc.query.mongo.GroupOp.postFilter:type_name -> com.pistonint.grpc.query.mongo.PostFilter
	11, // 14: com.pistonint.grpc.query.mongo.GroupOp.projectExprs:type_name -> com.pistonint.grpc.query.mongo.Expr
	11, // 15: com.pistonint.grpc.query.mongo.GroupOp.groupExprs:type_name -> com.pistonint.grpc.query.mongo.Expr
	0,  // 16: com.pistonint.grpc.query.mongo.Operation.op:type_name -> com.pistonint.grpc.query.mongo.AggregateOp
	20, // 17: com.pistonint.grpc.query.mongo.GrpcAddField.value:type_name -> com.pistonint.grpc.core.Value
	20, // 18: com.pistonint.grpc.query.mongo.PostFilter.values:type_name -> com.pistonint.grpc.core.Value
	0,  // 19: com.pistonint.grpc.query.mongo.Expr.op:type_name -> com.pistonint.grpc.query.mongo.AggregateOp
	12, // 20: com.pistonint.grpc.query.mongo.Expr.expression:type_name -> com.pistonint.grpc.query.mongo.Expression
	20, // 21: com.pistonint.grpc.query.mongo.Expression.params:type_name -> com.pistonint.grpc.core.Value
	1,  // 22: com.pistonint.grpc.query.mongo.BucketOp.match:type_name -> com.pistonint.grpc.query.mongo.Criteria
	21, // 23: com.pistonint.grpc.query.mongo.BucketOp.boundaries:type_name -> com.pistonint.grpc.core.Pair
	8,  // 24: com.pistonint.grpc.query.mongo.BucketOp.ops:type_name -> com.pistonint.grpc.query.mongo.Operation
	18, // 25: com.pistonint.grpc.query.mongo.DataPreview.versionStats:type_name -> com.pistonint.grpc.query.mongo.DataPreview.VersionStat
	20, // 26: com.pistonint.grpc.query.mongo.Criteria.CriteriaEntry.value:type_name -> com.pistonint.grpc.core.Value
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_com_pistonint_grpc_query_mongo_query_proto_init() }
func file_com_pistonint_grpc_query_mongo_query_proto_init() {
	if File_com_pistonint_grpc_query_mongo_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Criteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriteriaPlus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriteriaMedian); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriteriaDataRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcBucketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketReqs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcAddField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPreview_VersionStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_com_pistonint_grpc_query_mongo_query_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_pistonint_grpc_query_mongo_query_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_pistonint_grpc_query_mongo_query_proto_goTypes,
		DependencyIndexes: file_com_pistonint_grpc_query_mongo_query_proto_depIdxs,
		EnumInfos:         file_com_pistonint_grpc_query_mongo_query_proto_enumTypes,
		MessageInfos:      file_com_pistonint_grpc_query_mongo_query_proto_msgTypes,
	}.Build()
	File_com_pistonint_grpc_query_mongo_query_proto = out.File
	file_com_pistonint_grpc_query_mongo_query_proto_rawDesc = nil
	file_com_pistonint_grpc_query_mongo_query_proto_goTypes = nil
	file_com_pistonint_grpc_query_mongo_query_proto_depIdxs = nil
}
